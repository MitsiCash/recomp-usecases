:- eval(alice()).

% negation as failure support
not(A) :-
        derive(A),
        !,
        fail().
not(_).

% forwards a simple request from javaRunner to the Agent
alice() :-
 	rcvMult(XID,Protocol,From,request,{operation->Op,agent->Agent}),
	sendMsgSync(XID,Protocol,Agent,request,{operation->Op}).

% forwards a request for login, also defining the ipd from javaRunner to the Agent
alice() :-
 	rcvMult(XID,Protocol,From,request,{operation->Op,agent->Agent,idp->IDP}),
	sendMsgSync(XID,Protocol,Agent,request,{operation->Op,idp->IDP}).

% forwards a request containing a webID from javaRunner to the Agent
alice() :-
 	rcvMult(XID,P,From,request,{operation->Op,agent->Agent,webID->WebID}),
	sendMsgSync(XID,P,Agent,request,{operation->Op,webID->WebID}).

% forwards a request containing a webID and an object from javaRunner to the Agent
alice() :-
 	rcvMult(XID,P,From,request,{agent->Agent,operation->Op,webID->WebID,object->Obj}),
	sendMsgSync(XID,P,Agent,request,{operation->Op,webID->WebID,object->Obj}).

% this is for the search query
alice() :-
 	rcvMult(XID,P,From,request,{agent->Agent,operation->Op,webID->WebID,query->Q,dwp->DWP}),
	sendMsgSync(XID,P,Agent,request,{operation->Op,webID->WebID,query->Q,dwp->DWP}).

% ask an Agent to perform an operation for Obj, involving the party subjectWebID
alice() :-
 	rcvMult(XID,P,From,request,{agent->Agent,operation->Op,webID->WebID,object->Obj,subjectWebID->SWebID}),
	sendMsgSync(XID,P,Agent,request,{operation->Op,webID->WebID,object->Obj,subjectWebID->SWebID}).

% alice responds to a request for personal data sharing, for personalization purposes
alice() :-
    rcvMult(XID,P,From,input_request,{operation->consent, data->personal, purpose->personalization, msg->Msg}),
    Answer = "yes",
    sendMsgSync(XID,P,From,response,{answer->Answer}).


alice() :-
    % alice responds to username/password request. Calls alice_response/4 that contains the proper
    % login info (can be updated for different username/pass depending on the agent)
    rcvMult(XID,Protocol,From,input_request,{operation->credentials}),
    alice_response(credentials,From,XID,Protocol).

alice_response(credentials,From,XID,Protocol) :-
    User = "alice",
    Pass = "12345",
    sendMsgSync(XID,Protocol,From,response,{username->User,pass->Pass}).

% alice receives the OpenID
alice() :-
 	rcvMult(XID,Protocol,From,inform,{openID->OpenID}),
 	println(["log: Alice received the following openID: ", OpenID, " from ", From]),
 	assert(openID(From,OpenID)).

% consent for IDP's 3rd party sharing
alice() :-
    rcvMult(XID,P,From,input_request,{operation->consent, purpose->auth_3rd, msg->Msg}),
    alice_response(consent,auth3rd,From,XID,P,Msg).

alice_response(consent,auth3rd,From,XID,P,Msg) :-
    Answ = "yes", % a hard-coded yes
    openID(From,OpenID),
    sendMsgSync(XID,P,From,response,{answer->Answ, openID->OpenID}).

% alice sets the idp
alice() :-
    rcvMult(XID,P,From,input_request,{operation->define_idp}),
    alice_response(define_idp,From,XID,P).

alice_response(define_idp,From,XID,P) :-
    IDP = "idp",
    sendMsgSync(XID,P,From,response,{idp->IDP}).

% alice receives a cookie
alice() :-
 	rcvMult(XID,Protocol,From,data_exchange,{session_cookie->Cookie}),
 	println(["log: Alice received the following cookie: ",Cookie, " from ", From]),
 	assert(sessionCookie(From,Cookie)).

alice() :-
    % just prints any "inform" message that alice receives
    rcvMult(XID,Protocol,From,inform,{msg->Msg}),
    println(["log: Alice received the following message: ",Msg]).

alice() :-
    % prints any error message that alice receives
    rcvMult(XID,Protocol,From,inform,{error->Error}),
    println(["log: Alice received the following error: ",Error]).

alice() :-
 	rcvMult(XID,Protocol,From,data_exchange,{data->Obj}),
 	println(["log: Alice received the following data: ",Obj]).

% cookies!
alice() :-
    rcvMult(XID,Protocol,From,request,{operation->get_cookie}),
    cookieCheck(XID, Protocol, From).


cookieCheck(XID, Protocol, From) :-
    sessionCookie(From,Cookie),
    sendMsgSync(XID,Protocol,From,response,{session_cookie->Cookie}).

cookieCheck(XID, Protocol, From) :-
    not(sessionCookie(From,Cookie)),
    sendMsgSync(XID,Protocol,From,response,{session_cookie->null}).

